plugins {
    id 'java'
    id 'io.freefair.lombok' version '5.2.1' apply false
    id 'io.spring.dependency-management' version '1.0.10.RELEASE' apply false
    id 'org.springframework.boot' version '2.4.2' apply false
    id 'org.sonarqube' version '2.7.1' apply false
}

allprojects {
    group = 'com.com.kon'
    version = '1.0.0-SNAPSHOT'

    ext {
        springBootVersion = "2.4.2"
        mybatisVersion = "2.1.3"
        shiroVersion = "1.4.2"
    }

    repositories {
        maven {
            url "https://maven.aliyun.com/repository/public"
        }
        maven {
            url "https://repository.incarcloud.com/content/repositories/snapshots"
        }
    }
}
//apply是应用的插件
subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'org.sonarqube'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencies {
        compile "org.slf4j:slf4j-api"

        testCompile "org.junit.jupiter:junit-jupiter-api"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testCompile ("org.springframework.boot:spring-boot-starter-test") {
            exclude group: "junit", module: "junit"
            exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        }

        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
        }

        dependencies {
            dependencySet(group: "org.slf4j", version: "1.7.30") {
                entry "slf4j-api"
                entry "slf4j-simple"
                entry "slf4j-log4j12"
            }

            dependency "org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1"

            dependency "com.com.kon.framework:com.kon-swagger:1.0.0-SNAPSHOT"

            dependency "com.alibaba:fastjson:1.2.75"

            dependency "commons-io:commons-io:2.6"
            dependency "commons-net:commons-net:3.6"
            dependency "org.apache.commons:commons-lang3:3.10"
            dependency "org.apache.commons:commons-pool2:2.9.0"
        }
    }


    compileJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    compileTestJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    sonarqube {
        properties {
            property "sonar.sourceEncoding", "UTF-8"
        }
    }

    test {
        useJUnitPlatform()
    }

    task checkstyle(type: Checkstyle) {
        configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
        ignoreFailures true
        showViolations true
        source = fileTree('src')
        include '**/*.java'
        exclude '**/test/**'
        exclude '**/build/**'
        classpath = files()
    }

    task removeLombokConfig() {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            def lombokConfigFile = new File(subProjectPath, "lombok.config")
            if (lombokConfigFile.exists()) {
                lombokConfigFile.delete()
            }
        }
    }

    task removeOutputLog() {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            def logPath = new File(subProjectPath, "output.log")
            if (logPath.exists()) {
                logPath.delete()
            }
        }
    }

    jar {
        exclude("**/application-*.yml")
    }

    defaultTasks "assemble"
}